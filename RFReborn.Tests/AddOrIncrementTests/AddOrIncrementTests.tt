<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<# var types = new string[]{"sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong"};  #>
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RFReborn.Extensions;
namespace RFReborn.Tests.AddOrIncrementTests
{
<# foreach (var t in types) {#>
    [TestClass]
    public class AddOrIncrement<#=t#>Tests
    {
        [TestMethod]
        public void AddOrIncrement<#=t#>()
        {
            var key = "test";
            var dict = new Dictionary<string, <#=t#>>();
            dict.AddOrIncrement(key);
            Assert.IsTrue(dict.ContainsKey(key));
            Assert.AreEqual((<#=t#>)1, dict[key]);
            dict.AddOrIncrement(key);
            Assert.AreEqual((<#=t#>)2, dict[key]);
            dict.AddOrIncrement(key);
            Assert.AreEqual((<#=t#>)3, dict[key]);
        }

        [DataTestMethod]
        [DataRow((<#=t#>)5)]
        [DataRow((<#=t#>)10)]
        public void AddOrIncrement<#=t#>WithValue(<#=t#> value)
        {
            var key = "test";
            var dict = new Dictionary<string, <#=t#>>();
            dict.AddOrIncrement(key, value);
            Assert.IsTrue(dict.ContainsKey(key));
            Assert.AreEqual(value, dict[key]);
            dict.AddOrIncrement(key, value);
            Assert.AreEqual((<#=t#>)(value*2), dict[key]);
            dict.AddOrIncrement(key, value);
            Assert.AreEqual((<#=t#>)(value*3), dict[key]);
        }
    }
<#if (t != types[types.Length - 1]) {#>

<#}}#>
}
